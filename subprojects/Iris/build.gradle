/*
 * SPDX-License-Identifier: Apache-2.0
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import static JavaFXUtil.checkForJavaFX

buildscript {
    repositories {
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }
    dependencies {
        classpath 'org.openjfx:javafx-plugin:0.0.13'
    }
}

apply plugin: 'groovy'
if (JavaVersion.current().java11Compatible) {
    apply plugin: 'org.openjfx.javafxplugin'
    javafx {
        // to use JDK11+ with JavaFX built in, adjust and then uncomment next line
        // sdk = '/path/to/javafx-sdk'
        modules = [ 'javafx.controls', 'javafx.swing' ]
    }
}

repositories {
    maven { url 'https://jitpack.io' } // JSATFX
}

tasks.register('installWekaPackages', JavaExec) {
    group 'Setup'
    description "Install Weka optional packages"
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'InstallWekaPackages'
}

if (!JavaVersion.current().java11Compatible) {
    tasks.withType(GroovyCompile).configureEach {
        if (!checkForJavaFX()) {
            exclude '**/*JavaFX.groovy'
            doLast {
                println '''
                ******************************************************
                ** Excluding JavaFX scripts due to incompatible JDK **
                ** No JavaFX?                                       **
                ******************************************************
                '''.stripIndent()
            }
        }
    }
}

dependencies {
    implementation "org.apache.groovy:groovy:$groovy4Version"
    implementation "nz.ac.waikato.cms.weka:weka-dev:$wekaVersion"
    implementation "tech.tablesaw:tablesaw-core:$tablesawVersion"
    implementation "tech.tablesaw:tablesaw-jsplot:$tablesawVersion"
    implementation "org.knowm.xchart:xchart:$knowmXchartVersion"
    implementation("com.github.haifengl:smile-core:$smileVersion") {
        transitive = false
    }
    implementation("com.github.haifengl:smile-base:$smileVersion") {
        transitive = false
    }
    implementation "org.encog:encog-core:3.4"
    implementation("com.deepnetts:deepnetts-core:1.13.2") {
        exclude(group: 'org.apache.commons', module: 'commons-lang3')
        exclude(group: 'org.apache.commons', module: 'commons-configuration2')
        exclude(group: 'org.json')
    }
    implementation "com.edwardraff:JSAT:0.0.9"
    implementation 'com.github.EdwardRaff:JSATFX:master-SNAPSHOT'
    implementation "com.datumbox:datumbox-framework-lib:0.8.2"
    implementation files(['wekaDeeplearning4j', 'SelfOrganizingMap'].collect{
        "${System.getProperty('user.home')}/wekafiles/packages/${it}/${it}.jar"})
    implementation("org.nd4j:nd4j-api:$nd4jVersion") {
        exclude(group: 'com.github.oshi')
    }
    runtimeOnly "org.nd4j:nd4j-native-platform:$nd4jVersion"
    implementation("org.deeplearning4j:deeplearning4j-core:$nd4jVersion") {
        exclude(group: 'com.twelvemonkeys.imageio')
        exclude(group: 'com.github.jai-imageio')
        exclude(group: 'org.datavec', module: 'datavec-data-image')
        exclude(group: 'com.github.oshi')
        exclude(group: 'org.deeplearning4j', module: 'deeplearning4j-ui-components')
        exclude(group: 'org.deeplearning4j', module: 'deeplearning4j-modelimport')
    }
    implementation("org.tribuo:tribuo-classification-experiments:$tribuoVersion") {
        exclude(group: 'org.jline')
    }
    runtimeOnly "org.slf4j:slf4j-simple:$slf4jVersion"
    runtimeOnly "org.apache.logging.log4j:log4j-core:$log4j2Version"
    runtimeOnly "org.apache.commons:commons-math3:$commonsMath3Version"
}

tasks.register('checkJdk11Compatibility') {
    doLast {
        assert JavaVersion.current().java11Compatible, "JDK11+ is required but found ${JavaVersion.current()}!"
    }
}

tasks.register('checkJavaFXCompatibility') {
    doLast {
        assert checkForJavaFX(), "Expecting a JDK with JavaFX included but none found! Java: ${System.getProperty('java.home')}"
    }
}

def runAll = tasks.register('runAll') {
    group 'Application'
}

FileUtil.baseNames(sourceSets.main.allSource.files, ['InstallWekaPackages']).each { name ->
    def subtask = tasks.register("run$name", JavaExec) {
        group 'Application'
        if (name.contains('Datumbox')) dependsOn(checkJdk11Compatibility)
        if (name.contains('JavaFX') && !JavaVersion.current().java11Compatible) dependsOn(checkJavaFXCompatibility)
        description "Run ${name}.groovy as a JVM application/Groovy script"
        classpath = sourceSets.main.runtimeClasspath
        mainClass = name
    }
    runAll.configure {
        dependsOn subtask
    }
}
